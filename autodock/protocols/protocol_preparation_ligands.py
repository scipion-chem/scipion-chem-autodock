# **************************************************************************
# *
# * Authors:     Carlos Oscar Sorzano (coss@cnb.csic.es)
# *
# * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'scipion@cnb.csic.es'
# *
# **************************************************************************
import re, shutil
import os

from pwchem.utils import runOpenBabel, splitConformerFile, appendToConformersFile
from pyworkflow.protocol.params import PointerParam, BooleanParam, EnumParam, IntParam, FloatParam, LEVEL_ADVANCED
import pyworkflow.object as pwobj
from .protocol_preparation_receptor import ProtChemADTPrepare
from pwchem.objects import SmallMolecule, SetOfSmallMolecules

class ProtChemADTPrepareLigands(ProtChemADTPrepare):
    """Prepare ligands using Autodocking Tools from MGL"""
    _label = 'ligand preparation ADT'
    _program = ""

    def _defineParams(self, form):
        self.typeRL="ligand"
        form.addSection(label='Input')
        form.addParam('inputSmallMols', PointerParam, pointerClass="SetOfSmallMolecules",
                      label='Set of small molecules:', allowsNull=False,
                      help='It must be in pdb or mol2 format, you may use Schrodinger convert to change it')
        ProtChemADTPrepare._defineParamsBasic(self, form)

        conformers = form.addGroup("Conformers generation")
        conformers.addParam('doConformers', BooleanParam, default=False,
                            label='Do you want to generate conformers? ', allowsNull=False,
                            help='You can produce conformers of the ligand in order to do a better rigid docking')
        conformers.addParam('method_conf', EnumParam, condition="doConformers",
                            choices=["OpenBabel Genetic Algorithm", "OpenBabel Confab"],
                            default=0,
                            label='Method of conformers generation',
                            help='Method of conformers generation. If Confab fails due to the impossibility '
                                 'of assigning a force fields (there is a possibility that it may occur), you should'
                                 'use Genetic Algorithm generator ')

        conformers.addParam('number_conf', IntParam,
                            default=10, condition="doConformers",
                            label='Max. number of conformers:',
                            help='Set the number of conformers generated by OpenBabel from the same molecule.')

        conformers.addParam('rmsd_cutoff', FloatParam, condition="method_conf != 0 and doConformers",
                            default=0.5,
                            label='RMSD cutoff:',
                            help='Set the number of conformers generated by OpenBabel from the same molecule.',
                            expertLevel=LEVEL_ADVANCED)

    def _insertAllSteps(self):
        # Insert processing steps
        self._insertFunctionStep('preparationStep')
        if self.doConformers.get():
            self._insertFunctionStep('conformer_generation')
        self._insertFunctionStep('createOutput')

    def preparationStep(self):
        self.preparedFiles = []
        for mol in self.inputSmallMols.get():
            fnSmall = mol.getFileName()
            fnMol = os.path.split(fnSmall)[1]
            fnRoot, ext = os.path.splitext(fnMol)

            fnOut = self._getExtraPath(fnRoot+"-prep.pdbqt")
            self.preparedFiles.append(fnOut)

            if ext == '.sdf' and (self.repair.get()==3 or self.repair.get()==1):
                # AUTODOCK: Cannot handle add hydrogens to files coming from 2D sdf files
                args = ' -isdf {} -h -opdbqt -O {}'.format(os.path.abspath(fnSmall), os.path.abspath(fnOut))
                if self.preserveCharges.get() == 0:
                    args += ' --partialcharge gasteiger'
                runOpenBabel(protocol=self, args=args, cwd=os.path.abspath(self._getExtraPath()))
            else:
                if ext == '.sdf':
                    auxPDB = self._getTmpPath(os.path.basename(fnOut).replace('.pdbqt', '.pdb'))
                    args = ' -isdf {} -h -opdb -O {}'.format(os.path.abspath(fnSmall), os.path.abspath(auxPDB))
                    runOpenBabel(protocol=self, args=args, cwd=os.path.abspath(self._getExtraPath()))
                    fnSmall = auxPDB

                args = ' -v -l %s -o %s' % (fnSmall, fnOut)
                ProtChemADTPrepare.callPrepare(self, "prepare_ligand4", args)

    def conformer_generation(self):
      """ Generate a number of conformers of the same small molecule in pdbqt format with
          openbabel using two different algorithm
      """

      for file in self.preparedFiles:
        fnRoot = re.split("-", os.path.split(file)[1])[0]  # ID or filename without -prep.mol2

        if self.method_conf.get() == 0:  # Genetic algorithm
          args = " %s --conformer --nconf %s --score rmsd --writeconformers -O %s_conformers.pdbqt" % \
                 (os.path.abspath(file), str(self.number_conf.get() - 1), fnRoot)
        else:  # confab
          args = " %s --confab --original --verbose --conf %s --rcutoff %s -O %s_conformers.pdbqt" % \
                 (os.path.abspath(file), str(self.number_conf.get() - 1), str(self.rmsd_cutoff.get()), fnRoot)

        runOpenBabel(protocol=self, args=args, cwd=os.path.abspath(self._getExtraPath()))

    def createOutput(self):
        outputSmallMolecules = SetOfSmallMolecules().create(outputPath=self._getPath(), suffix='')
        for file in self.preparedFiles:
            fnRoot = re.split("-", os.path.split(file)[1])[0]
            outDir = self._getExtraPath(fnRoot)
            os.mkdir(outDir)
            firstConfFile = self._getTmpPath('{}-{}.pdbqt'.format(fnRoot, 1))
            shutil.copy(file, firstConfFile)
            confFile = self._getExtraPath("{}_conformers.pdbqt".format(fnRoot))
            confFile = appendToConformersFile(confFile, firstConfFile,
                                              beginning=True)
            confDir = splitConformerFile(confFile, outDir=outDir)
            for molFile in os.listdir(confDir):
                molFile = os.path.abspath(os.path.join(confDir, molFile))
                newSmallMol = SmallMolecule(smallMolFilename=molFile, type='AutoDock')
                newSmallMol._ConformersFile = pwobj.String(confFile)
                outputSmallMolecules.append(newSmallMol)

        self._defineOutputs(outputSmallMolecules=outputSmallMolecules)
        self._defineSourceRelation(self.inputSmallMols, outputSmallMolecules)

    def _warnings(self):
      ws = []
      for mol in self.inputSmallMols.get():
          if mol.getFileName().endswith('.sdf') and (self.repair.get()==3 or self.repair.get()==1):
              ws.append('The Autodock4 script prepare_ligand4.py cannot handle to add hydrogens to '
                        'molecules coming from 2D sdf files. Do you want to continue performing a '
                        'similar operation with openBabel? (Note that the resulting molecules might be different)')
              break
      return ws
