# **************************************************************************
# *
# * Authors:     Carlos Oscar Sorzano (coss@cnb.csic.es)
# *
# * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'scipion@cnb.csic.es'
# *
# **************************************************************************
import re, shutil, os, glob

from pyworkflow.protocol.params import PointerParam, BooleanParam, EnumParam, IntParam, FloatParam, LEVEL_ADVANCED
from pyworkflow.utils.path import createLink
import pyworkflow.object as pwobj

from pwchem.utils import runOpenBabel, splitConformerFile, appendToConformersFile, performBatchThreading
from pwchem.objects import SmallMolecule, SetOfSmallMolecules

from autodock.protocols.protocol_preparation_receptor import ProtChemADTPrepare


class ProtChemADTPrepareLigands(ProtChemADTPrepare):
    """Prepare ligands using Autodocking Tools from MGL"""
    _label = 'ligand preparation ADT'
    _program = ""

    def _defineParams(self, form):
        self.typeRL = "ligand"
        form.addSection(label='Input')
        form.addParam('inputSmallMolecules', PointerParam, pointerClass="SetOfSmallMolecules",
                      label='Set of small molecules:', allowsNull=False,
                      help='It must be in pdb or mol2 format, you may use Schrodinger convert to change it')
        ProtChemADTPrepare._defineParamsBasic(self, form)

        conformers = form.addGroup("Conformers generation")
        conformers.addParam('doConformers', BooleanParam, default=False,
                            label='Do you want to generate conformers? ', allowsNull=False,
                            help='You can produce conformers of the ligand in order to do a better rigid docking')
        conformers.addParam('method_conf', EnumParam, condition="doConformers",
                            choices=["OpenBabel Genetic Algorithm", "OpenBabel Confab"], default=0,
                            label='Method of conformers generation',
                            help='Method of conformers generation. If Confab fails due to the impossibility '
                                 'of assigning a force fields (there is a possibility that it may occur), you should'
                                 'use Genetic Algorithm generator ')

        conformers.addParam('number_conf', IntParam,
                            default=10, condition="doConformers", label='Max. number of conformers:',
                            help='Set the number of conformers generated by OpenBabel from the same molecule.')

        conformers.addParam('rmsd_cutoff', FloatParam, condition="method_conf != 0 and doConformers",
                            default=0.5, label='RMSD cutoff:',
                            help='Set the number of conformers generated by OpenBabel from the same molecule.',
                            expertLevel=LEVEL_ADVANCED)

        form.addParallelSection(threads=4, mpi=1)

    def _insertAllSteps(self):
        # Insert processing steps
        self._insertFunctionStep('preparationStep')
        if self.doConformers.get():
            self._insertFunctionStep('conformerGenerationStep')
        self._insertFunctionStep('createOutput')

    def preparationStep(self):
        molFns = [os.path.abspath(mol.getFileName()) for mol in self.inputSmallMolecules.get()]

        failedMols = performBatchThreading(self.performPreparation, molFns, self.numberOfThreads.get(), cloneItem=False,
                                           outDir=os.path.abspath(self._getExtraPath()))

        if len(failedMols) > 0:
          with open(os.path.abspath(self._getPath('failedPreparations.txt')), 'w') as f:
            for molFn in failedMols:
              f.write(molFn + '\n')

    def conformerGenerationStep(self):
      """ Generate a number of conformers of the same small molecule in pdbqt format with
          openbabel using two different algorithm
      """
      molFns = [molFile for molFile in glob.glob(self._getExtraPath('*-prep.pdbqt'))]

      failedMols = performBatchThreading(self.performConfGeneration, molFns, self.numberOfThreads.get(),
                                         cloneItem=False, outDir=os.path.abspath(self._getExtraPath()))

      if len(failedMols) > 0:
        with open(os.path.abspath(self._getPath('failedConfomerGeneration.txt')), 'w') as f:
          for molFn in failedMols:
            f.write(molFn + '\n')

    def createOutput(self):
        outputSmallMolecules = SetOfSmallMolecules().create(outputPath=self._getPath(), suffix='')
        for file in glob.glob(self._getExtraPath('*-prep.pdbqt')):
            fnRoot = re.split("-prep", os.path.split(file)[1])[0]
            if self.doConformers.get():
                outDir = self._getExtraPath(fnRoot)
                os.mkdir(outDir)
                firstConfFile = self._getTmpPath('{}-{}.pdbqt'.format(fnRoot, 1))
                shutil.copy(file, firstConfFile)
                confFile = self._getExtraPath("{}_conformers.pdbqt".format(fnRoot))
                confFile = appendToConformersFile(confFile, firstConfFile,
                                                  beginning=True)
                confDir = splitConformerFile(confFile, outDir=outDir)
                for molFile in os.listdir(confDir):
                    molFile = os.path.abspath(os.path.join(confDir, molFile))
                    confId = molFile.split('-')[-1].split('.')[0]

                    newSmallMol = SmallMolecule(smallMolFilename=molFile, type='AutoDock')
                    newSmallMol.setMolName(fnRoot)
                    newSmallMol._ConformersFile = pwobj.String(confFile)
                    newSmallMol.setConfId(confId)
                    outputSmallMolecules.append(newSmallMol)
            else:
                newSmallMol = SmallMolecule(smallMolFilename=file, type='AutoDock')
                newSmallMol.setMolName(fnRoot)
                outputSmallMolecules.append(newSmallMol)

        self._defineOutputs(outputSmallMolecules=outputSmallMolecules)
        self._defineSourceRelation(self.inputSmallMolecules, outputSmallMolecules)

    def _warnings(self):
      ws = []
      for mol in self.inputSmallMolecules.get():
          if mol.getFileName().endswith('.sdf') and (self.repair.get()==3 or self.repair.get()==1):
              ws.append('The Autodock4 script prepare_ligand4.py cannot handle to add hydrogens to '
                        'molecules coming from 2D sdf files. Do you want to continue performing a '
                        'similar operation with openBabel? (Note that the resulting molecules might be different)')
              break
      return ws

    def performPreparation(self, molFns, molLists, it, outDir):
      failedMols = []
      for fnSmall in molFns:
        fnMol = os.path.split(fnSmall)[1]
        fnRoot, ext = os.path.splitext(fnMol)
        fnOut = os.path.join(outDir, fnRoot + "-prep.pdbqt")
        try:
          if ext == '.sdf' and (self.repair.get() == 3 or self.repair.get() == 1):
            # AUTODOCK: Cannot handle add hydrogens to files coming from 2D sdf files
            args = ' -isdf {} -h -opdbqt -O {}'.format(os.path.abspath(fnSmall), os.path.abspath(fnOut))
            if self.preserveCharges.get() == 0:
              args += ' --partialcharge gasteiger'
            runOpenBabel(protocol=self, args=args, cwd=outDir, popen=True)
          else:
            if ext == '.sdf':
              auxPDB = os.path.abspath(self._getTmpPath(os.path.basename(fnOut).replace('.pdbqt', '.pdb')))
              args = ' -isdf {} -h -opdb -O {}'.format(os.path.abspath(fnSmall), auxPDB)
              runOpenBabel(protocol=self, args=args, cwd=outDir, popen=True)
              fnSmall = auxPDB

            # Neccessary to have a local copy of ligandFile from mgltools 1.5.7
            molLink = os.path.join(outDir, os.path.basename(fnSmall))
            createLink(fnSmall, molLink)
            args = ' -l %s -o %s' % (fnSmall, fnOut)
            ProtChemADTPrepare.callPrepare(self, "prepare_ligand4", args, outDir=self._getExtraPath(), popen=True)
            os.remove(molLink)
        except:
          failedMols.append(fnRoot)

      molLists[it] = failedMols
      return molLists[it]

    def performConfGeneration(self, molFns, molLists, it, outDir):
      failedMols = []
      for fnSmall in molFns:
        fnRoot = re.split("-prep", os.path.split(fnSmall)[1])[0]  # ID or filename without -prep.mol2

        if self.method_conf.get() == 0:  # Genetic algorithm
          args = " %s --conformer --nconf %s --score rmsd --writeconformers -O %s_conformers.pdbqt" % \
                 (os.path.abspath(fnSmall), str(self.number_conf.get() - 1), fnRoot)
        else:  # confab
          args = " %s --confab --original --conf %s --rcutoff %s -O %s_conformers.pdbqt" % \
                 (os.path.abspath(fnSmall), str(self.number_conf.get() - 1), str(self.rmsd_cutoff.get()), fnRoot)

        try:
          runOpenBabel(protocol=self, args=args, cwd=outDir, popen=True)
        except:
          failedMols.append(fnRoot)

      molLists[it] = failedMols
      return molLists[it]

