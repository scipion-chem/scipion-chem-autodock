# **************************************************************************
# *
# * Authors:     Carlos Oscar Sorzano (coss@cnb.csic.es)
# *
# * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'scipion@cnb.csic.es'
# *
# **************************************************************************
import re, shutil
import os

from pwchem.utils import runOpenBabel
from pyworkflow.protocol.params import PointerParam, BooleanParam, EnumParam, IntParam, FloatParam, LEVEL_ADVANCED
from .protocol_preparation_receptor import ProtChemADTPrepare
from pwchem.objects import SmallMolecule, SetOfSmallMolecules

class ProtChemADTPrepareLigands(ProtChemADTPrepare):
        """Prepare ligands using Autodocking Tools from MGL"""
        _label = 'ligand preparation ADT'
        _program = ""

        def _defineParams(self, form):
            self.typeRL="ligand"
            form.addSection(label='Input')
            form.addParam('inputSmallMols', PointerParam, pointerClass="SetOfSmallMolecules",
                          label='Set of small molecules:', allowsNull=False,
                          help='It must be in pdb or mol2 format, you may use Schrodinger convert to change it')
            ProtChemADTPrepare._defineParamsBasic(self, form)

            conformers = form.addGroup("Conformers generation")
            conformers.addParam('doConformers', BooleanParam, default=False,
                                label='Do you want to generate conformers? ', allowsNull=False,
                                help='You can produce conformers of the ligand in order to do a better rigid docking')
            conformers.addParam('method_conf', EnumParam, condition="doConformers",
                                choices=["OpenBabel Genetic Algorithm", "OpenBabel Confab"],
                                default=0,
                                label='Method of conformers generation',
                                help='Method of conformers generation. If Confab fails due to the impossibility '
                                     'of assigning a force fields (there is a possibility that it may occur), you should'
                                     'use Genetic Algorithm generator ')

            conformers.addParam('number_conf', IntParam,
                                default=10, condition="doConformers",
                                label='Max. number of conformers:',
                                help='Set the number of conformers generated by OpenBabel from the same molecule.')

            conformers.addParam('rmsd_cutoff', FloatParam, condition="method_conf != 0 and doConformers",
                                default=0.5,
                                label='RMSD cutoff:',
                                help='Set the number of conformers generated by OpenBabel from the same molecule.',
                                expertLevel=LEVEL_ADVANCED)

        def _insertAllSteps(self):
            # Insert processing steps
            self._insertFunctionStep('preparationStep')
            if self.doConformers.get():
                self._insertFunctionStep('conformer_generation')
            self._insertFunctionStep('createOutput')

        def preparationStep(self):
            self.preparedFiles = []
            for mol in self.inputSmallMols.get():
                fnSmall = mol.smallMoleculeFile.get()
                fnMol = os.path.split(fnSmall)[1]
                fnRoot = os.path.splitext(fnMol)[0]
                fnOut = self._getExtraPath(fnRoot+"_prep.pdbqt")
                self.preparedFiles.append(fnOut)

                args = ' -v -l %s -o %s' % (fnSmall, fnOut)
                ProtChemADTPrepare.callPrepare(self, "prepare_ligand4", args)

        def conformer_generation(self):
          """ Generate a number of conformers of the same small molecule in pdbqt format with
              openbabel using two different algorithm
          """

          for file in self.preparedFiles:
            fnRoot = re.split("_", os.path.split(file)[1])[0]  # ID or filename without _prep.mol2

            if self.method_conf.get() == 0:  # Genetic algorithm
              args = " %s --conformer --nconf %s --score rmsd --writeconformers -O %s_conformers.pdbqt" % \
                     (os.path.abspath(file), str(self.number_conf.get()), fnRoot)
            else:  # confab
              args = " %s --confab --original --verbose --conf %s --rcutoff %s -O %s_conformers.pdbqt" % \
                     (os.path.abspath(file), str(self.number_conf.get()), str(self.rmsd_cutoff.get()), fnRoot)

            runOpenBabel(protocol=self, args=args, cwd=os.path.abspath(self._getExtraPath()))

        def createOutput(self):
            outputSmallMolecules = SetOfSmallMolecules().create(outputPath=self._getPath(), suffix='SmallMols')
            for file in self.preparedFiles:
                fnRoot = re.split("_", os.path.split(file)[1])[0]
                outDir = self._getExtraPath(fnRoot)
                os.mkdir(outDir)
                shutil.copy(file, os.path.join(outDir, '{}-{}.pdbqt'.format(fnRoot, 1)))

                confDir = self.splitConformerFile(self._getExtraPath("{}_conformers.pdbqt".format(fnRoot)))
                for molFile in os.listdir(confDir):
                    molFile = os.path.abspath(os.path.join(confDir, molFile))
                    outputSmallMolecules.append(SmallMolecule(smallMolFilename=molFile, type='AutoDock'))

            self._defineOutputs(outputSmallMols=outputSmallMolecules)
            self._defineSourceRelation(self.inputSmallMols, outputSmallMolecules)


        ####################### UTILS ######################
        def splitConformerFile(self, confFile):
            fnRoot = re.split("_", os.path.split(confFile)[1])[0]
            outDir = self._getExtraPath(fnRoot)
            iConf, lastRemark, towrite = 2, True, ''
            with open(confFile) as fConf:
                for line in fConf:
                    if line.startswith('REMARK'):
                        if lastRemark:
                            towrite += line
                        else:
                            newFile = os.path.join(outDir, '{}-{}.pdbqt'.format(fnRoot, iConf))
                            self.writeFile(towrite, newFile)
                            towrite, lastRemark = line, True
                            iConf += 1
                    else:
                        towrite += line
                        lastRemark = False
            newFile = os.path.join(outDir, '{}-{}.pdbqt'.format(fnRoot, iConf))
            self.writeFile(towrite, newFile)
            return outDir

        def writeFile(self, towrite, file):
            with open(file, 'w') as f:
                f.write(towrite)
